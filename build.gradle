subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'

    configurations {
        provided
    }

    sourceCompatibility = jdkVersion
    targetCompatibility = jdkVersion

    tasks.withType(AbstractCompile) {
        it.options.encoding = defaultEncoding
    }

    sourceSets.each { it.compileClasspath += configurations.provided }
    sourceSets.test.runtimeClasspath += configurations.provided

    repositories {
        mavenCentral()
    }

    dependencies {
        compile("org.springframework.security:spring-security-core:$springSecurityVersion") {
            exclude module: 'commons-logging'
        }
        compile("org.springframework.data:spring-data-jpa:$springDataJpaVersion") {
            exclude module: 'commons-logging'
        }
        compile "org.hibernate:hibernate-validator:$hibernateValidatorVersion"
        compile "com.mysema.querydsl:querydsl-jpa:$querydslVersion"
        compile "org.aspectj:aspectjweaver:$aspectjVersion"
        compile "org.slf4j:slf4j-api:$slf4jVersion"
        compile "org.slf4j:jcl-over-slf4j:$slf4jVersion"
        compile "ch.qos.logback:logback-classic:$logbackVersion"
        compile "com.h2database:h2:$h2Version"

        provided "javax.inject:javax.inject:$injectApiVersion"

        testCompile "junit:junit:$junitVersion"
        testCompile "org.hamcrest:hamcrest-all:$hamcrestVersion"
        testCompile "org.mockito:mockito-all:$mockitoVersion"
        testCompile("org.springframework:spring-test:$springVersion") {
            exclude module: 'commons-logging'
        }
    }

    idea {
        module {
            scopes.PROVIDED.plus += [configurations.provided]
            downloadJavadoc = true
            downloadSources = true
        }
    }

}

task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}
